recurtie:

set search_path to ruimtereizen_voor_iedereen;

WITH RECURSIVE maan(objectnaam, satellietvan, boom) AS (
SELECT objectnaam, satellietvan, objectnaam::text
FROM hemelobjecten
WHERE satellietvan = 'Zon'
UNION ALL
SELECT h.objectnaam, h.satellietvan, boom  '-'  m.satellietvan
FROM hemelobjecten h, maan m
WHERE m.objectnaam = h.satellietvan
)
SELECT objectnaam, boom
FROM maan
ORDER BY objectnaam;



15: ORDMS oef

CREATE TYPE drank as(
    naam varchar(30)
)

create table dranken of drank
 (naam not null UNIQUE);

create table bieren 
(alcoholpercentage int)
inherits (dranken);

SELECT *
FROM dranken;

SELECT *
FROM only dranken;

SELECT *
FROM bieren;

CREATE OR REPLACE FUNCTION cast(dranken)
RETURNS text AS
$$
DECLARE
 result text;
BEGIN
 result= dranken.naam
 RETURN result;
END;
$$
LANGUAGE plpgsql;

cast(dranken::dranken)

pg_type_off


19:OFF oef
eige oplossingen
create or replace function grote(naam varchar(50))
    returns int
    as
$$
Begin 
	return
    (select diameter
    from hemelobjecten
    where objectnaam=$1);
end;
$$ Language'plpgsql';

create or replace function add(i int, i2 int, i3 int)
    returns int
    as
$$
Begin 
    return i+i2+i3;
end;
$$ Language'plpgsql'


oplossingen plakker
CREATE OR REPLACE FUNCTION grootte(objectnaam varchar(10), satellietvan varchar(10), afstand decimal, diameter int)
RETURNS INT
AS
$$
SELECT $4
$$ language'sql';
;
SELECT grootte('Venus', 'Zon', 108200.000, 12104);

CREATE OR REPLACE FUNCTION tel_op(i int, j int, k int)
RETURNS INT
 AS
$$

BEGIN
RETURN i+j+k;
END;
$$ LANGUAGE 'plpgsql';

SELECT tel_op(1, 2, 3)

DROP TABLE IF EXISTS ARCHIVE_TEST;
CREATE TABLE ARCHIVE_TEST(
id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
datum date,
event text)
;

INSERT INTO ARCHIVE_TEST (datum, event) VALUESÂ 
(CURRENT_DATE, 'Today'),
(CURRENT_DATE + interval '1 days', 'Tomorrow'),
(CURRENT_DATE - interval '1 days', 'Yesterday'),
(CURRENT_DATE - interval '10 days', 'lang geleden'),
(CURRENT_DATE - interval '20 days', 'langer geleden'),
(CURRENT_DATE - interval '1 year', 'superlang geleden')
;

CREATE OR REPLACE PROCEDURE ARCHIVE()
as
$$
DELETE FROM ARCHIVE_TEST
WHERE datum<=CURRENT_DATE - interval '10 days';
$$ LANGUAGE 'sql';

CALL ARCHIVE();



SELECT user_administration.get_replication();


CREATE SUBSCRIPTION mysub_r0875579
 CONNECTION 'dbname=dataman host=fuji.ucll.be user=local_r0875579 port=52324 password=AThS!jk:SU03PMZg sslmode=require'
 PUBLICATION dataman_pub;


1. Toon alle films gehuurd door Karen Jackson

SET SEARCH_PATH TO pagila;

-- Indien customer id, rental simpelweg joinen op het customer_id
SELECT film.*
FROM film
INNER JOIN pagila.inventory ON film.film_id = inventory.film_id
INNER JOIN pagila.rental ON inventory.inventory_id = rental.inventory_id
INNER JOIN pagila.customer c on rental.customer_id = c.customer_id
WHERE first_name = 'KAREN' AND last_name = 'JACKSON'


2. Toon alle de acteurs die waarvan hun naam begint met dezelfde letter als de klant 13, toon ook enkel de acteurs die voorkomen in films die customer 13 gehuurt heeft

SET SEARCH_PATH TO pagila;

SELECT DISTINCT actor.*
FROM actor
INNER JOIN film_actor ON actor.actor_id = film_actor.actor_id
INNER JOIN film ON film_actor.film_id = film.film_id
INNER JOIN pagila.inventory ON film.film_id = inventory.film_id
INNER JOIN pagila.rental ON inventory.inventory_id = rental.inventory_id AND rental.customer_id = 13
WHERE LEFT(actor.last_name, 1) = 'J'

3. Toon alle titels van films die Karen Jackson (klantnr 13) gehuurd heeft en hun afwijking tegenover de gemiddelde rent_rate van Karen Jacksons rentals
SET SEARCH_PATH TO pagila;

SELECT film.title, rental_duration - AVG(rental_duration) OVER()
FROM film
INNER JOIN pagila.inventory ON film.film_id = inventory.film_id
INNER JOIN pagila.rental ON inventory.inventory_id = rental.inventory_id AND rental.customer_id = 13

--jdfksjflksjf
CREATE TABLE hjalp(
eerstekolom char(10), 
tweedekolom char(10),
constraint pk_eerstekolom PRIMARY KEY (eerstekolom));

INSERT INTO hjalp(eerstekolom, tweedekolom)
VALUES('een', 'twee');

CREATE VIEW hjelp(eerstekolom) AS
    SELECT eerstekolom FROM hjalp;

CREATE USER sarah;
CREATE USER marthe;

GRANT SELECT ON hjalp TO marthe;
GRANT SELECT ON hjelp TO marthe;
GRANT SELECT ON hjelp TO sarah;

START TRANSACTION ;
    SET ROLE sarah;
    SELECT * FROM hjelp;
ROLLBACK

--jdflskjfeojflkjd
select current_user;




--see all views
SET search_path TO r0938725;
select schemaname, viewname, viewowner, definition

from pg_views where schemaname = 'r0938725'

union

select schemaname, matviewname, matviewowner, definition

from pg_matviews where schemaname = 'r0938725';